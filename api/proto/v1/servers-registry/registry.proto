syntax = "proto3";
package v1;

option go_package = "gen/servers-registry/pb";

service ServersRegistryService {
  rpc RegisterGameServer(RegisterGameServerRequest) returns (RegisterGameServerResponse);
  rpc AvailableGameServersForMapAndRealm(AvailableGameServersForMapAndRealmRequest) returns (AvailableGameServersForMapAndRealmResponse);
  rpc RandomGameServerForRealm(RandomGameServerForRealmRequest) returns (RandomGameServerForRealmResponse);
  rpc ListGameServersForRealm(ListGameServersForRealmRequest) returns (ListGameServersResponse);
  rpc ListAllGameServers(ListAllGameServersRequest) returns (ListGameServersResponse);
  rpc GameServerMapsLoaded(GameServerMapsLoadedRequest) returns (GameServerMapsLoadedResponse);

  rpc RegisterGateway(RegisterGatewayRequest) returns (RegisterGatewayResponse);
  rpc GatewaysForRealms(GatewaysForRealmsRequest) returns (GatewaysForRealmsResponse);
  rpc ListGatewaysForRealm(ListGatewaysForRealmRequest) returns (ListGatewaysForRealmResponse);
}

//
// RegisterGameServer
//
message RegisterGameServerRequest{
  string api = 1;

  uint32 gamePort = 2;
  uint32 healthPort = 3;
  uint32 grpcPort = 4;
  uint32 realmID = 5;
  bool   isCrossRealm = 6; // If true realm id should be 0
  string availableMaps = 7;
  string preferredHostName = 8;
}

message RegisterGameServerResponse{
  string api = 1;

  string id = 2;
  repeated uint32 assignedMaps = 3;
}

//
// AvailableGameServersForMapAndRealm
//
message AvailableGameServersForMapAndRealmRequest{
  string api = 1;

  uint32 realmID = 2;
  uint32 mapID = 3;
  bool   isCrossRealm = 4;  // Can't be used with realm id
}

message AvailableGameServersForMapAndRealmResponse{
  string api = 1;

  repeated Server gameServers = 2;
}

//
// RandomGameServerForRealm
//
message RandomGameServerForRealmRequest{
  string api = 1;

  uint32 realmID = 2;
}

message RandomGameServerForRealmResponse{
  string api = 1;

  Server gameServer = 2;
}

//
// ListGameServersForRealm
//
message ListGameServersForRealmRequest {
  string api = 1;

  uint32 realmID = 2;
  bool   isCrossRealm = 3; // Can't be used with realm id
}

message GameServerDetailed {
  message Diff {
    uint32 mean = 1;
    uint32 median = 2;
    uint32 percentile95 = 3;
    uint32 percentile99 = 4;
    uint32 max = 5;
  };

  string ID = 1;
  string address = 2;
  string healthAddress = 3;
  string grpcAddress = 4;
  uint32 realmID = 5;
  bool isCrossRealm = 6;
  uint32 activeConnections = 7;
  Diff diff = 8;
  repeated uint32 availableMaps = 9;
  repeated uint32 assignedMaps = 10;
}

message ListGameServersResponse {
  string api = 1;

  repeated GameServerDetailed gameServers = 2;
}

//
// ListAllGameServers
//
message ListAllGameServersRequest {
  string api = 1;
}

//
// GameServerMapsLoaded
//
message GameServerMapsLoadedRequest {
  string api = 1;

  string gameServerID = 2;
  repeated uint32 mapsLoaded = 3;
}

message GameServerMapsLoadedResponse {
  string api = 1;
}

//
// RegisterGateway
//
message RegisterGatewayRequest{
  string api = 1;

  uint32 gamePort = 2;
  uint32 healthPort = 3;
  uint32 realmID = 4;
  bool   isCrossRealm = 5;  // Can't be used with realm id
  string preferredHostName = 6;
}

message RegisterGatewayResponse{
  string api = 1;

  string id = 2;
}

//
// GatewaysForRealms
//
message GatewaysForRealmsRequest{
  string api = 1;

  repeated uint32 realmIDs = 2;
}

message GatewaysForRealmsResponse{
  string api = 1;

  repeated Server gateways = 2;
}

//
// ListGatewaysForRealm
//
message ListGatewaysForRealmRequest {
  string api = 1;

  uint32 realmID = 2;
}

message GatewayServerDetailed {
  string id = 1;
  string address = 2;
  string healthAddress = 3;
  uint32 realmID = 4;
  uint32 activeConnections = 5;
}

message ListGatewaysForRealmResponse {
  string api = 1;

  repeated GatewayServerDetailed gateways = 2;
}

//
// Shared
//
message Server {
  string address = 1;
  uint32 realmID = 2;
  bool   isCrossRealm = 3;
  string grpcAddress = 4;
}
