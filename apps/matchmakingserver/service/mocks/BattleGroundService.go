// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	battleground "github.com/walkline/ToCloud9/apps/matchmakingserver/battleground"

	events "github.com/walkline/ToCloud9/shared/events"

	mock "github.com/stretchr/testify/mock"

	repo "github.com/walkline/ToCloud9/apps/matchmakingserver/repo"

	service "github.com/walkline/ToCloud9/apps/matchmakingserver/service"
)

// BattleGroundService is an autogenerated mock type for the BattleGroundService type
type BattleGroundService struct {
	mock.Mock
}

// AddGroupToQueue provides a mock function with given fields: ctx, realmID, leaderGUID, partyMembers, typeID, leaderLvl, teamID
func (_m *BattleGroundService) AddGroupToQueue(ctx context.Context, realmID uint32, leaderGUID uint64, partyMembers []uint64, typeID battleground.QueueTypeID, leaderLvl uint8, teamID battleground.PVPTeam) error {
	ret := _m.Called(ctx, realmID, leaderGUID, partyMembers, typeID, leaderLvl, teamID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64, []uint64, battleground.QueueTypeID, uint8, battleground.PVPTeam) error); ok {
		r0 = rf(ctx, realmID, leaderGUID, partyMembers, typeID, leaderLvl, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BattlegroundStatusChanged provides a mock function with given fields: ctx, status, realmID, instanceID, isCrossrealm
func (_m *BattleGroundService) BattlegroundStatusChanged(ctx context.Context, status battleground.Status, realmID uint32, instanceID uint32, isCrossrealm bool) error {
	ret := _m.Called(ctx, status, realmID, instanceID, isCrossrealm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, battleground.Status, uint32, uint32, bool) error); ok {
		r0 = rf(ctx, status, realmID, instanceID, isCrossrealm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BattlegroundsThatNeedPlayers provides a mock function with given fields: ctx, battlegroundTypeID, bracketID, realmID, battlegroupID
func (_m *BattleGroundService) BattlegroundsThatNeedPlayers(ctx context.Context, battlegroundTypeID battleground.QueueTypeID, bracketID uint8, realmID uint32, battlegroupID uint32) ([]battleground.Battleground, error) {
	ret := _m.Called(ctx, battlegroundTypeID, bracketID, realmID, battlegroupID)

	var r0 []battleground.Battleground
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, battleground.QueueTypeID, uint8, uint32, uint32) ([]battleground.Battleground, error)); ok {
		return rf(ctx, battlegroundTypeID, bracketID, realmID, battlegroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, battleground.QueueTypeID, uint8, uint32, uint32) []battleground.Battleground); ok {
		r0 = rf(ctx, battlegroundTypeID, bracketID, realmID, battlegroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]battleground.Battleground)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, battleground.QueueTypeID, uint8, uint32, uint32) error); ok {
		r1 = rf(ctx, battlegroundTypeID, bracketID, realmID, battlegroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBattleground provides a mock function with given fields: ctx, template, queueType, bracketID, realmID, battlegroupID, allianceGroups, hordeGroups
func (_m *BattleGroundService) CreateBattleground(ctx context.Context, template repo.BattlegroundTemplate, queueType battleground.QueueTypeID, bracketID service.BracketID, realmID uint32, battlegroupID uint32, allianceGroups []service.QueuedGroup, hordeGroups []service.QueuedGroup) error {
	ret := _m.Called(ctx, template, queueType, bracketID, realmID, battlegroupID, allianceGroups, hordeGroups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.BattlegroundTemplate, battleground.QueueTypeID, service.BracketID, uint32, uint32, []service.QueuedGroup, []service.QueuedGroup) error); ok {
		r0 = rf(ctx, template, queueType, bracketID, realmID, battlegroupID, allianceGroups, hordeGroups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBattlegroundByBattlegroundKey provides a mock function with given fields: ctx, instanceID, realmKey
func (_m *BattleGroundService) GetBattlegroundByBattlegroundKey(ctx context.Context, instanceID uint32, realmKey repo.RealmWithBattlegroupKey) (*battleground.Battleground, error) {
	ret := _m.Called(ctx, instanceID, realmKey)

	var r0 *battleground.Battleground
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, repo.RealmWithBattlegroupKey) (*battleground.Battleground, error)); ok {
		return rf(ctx, instanceID, realmKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, repo.RealmWithBattlegroupKey) *battleground.Battleground); ok {
		r0 = rf(ctx, instanceID, realmKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*battleground.Battleground)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, repo.RealmWithBattlegroupKey) error); ok {
		r1 = rf(ctx, instanceID, realmKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueOrBattlegroundLinkForPlayer provides a mock function with given fields: k
func (_m *BattleGroundService) GetQueueOrBattlegroundLinkForPlayer(k service.QueuesByRealmAndPlayerKey) []service.QueueOrBattlegroundLink {
	ret := _m.Called(k)

	var r0 []service.QueueOrBattlegroundLink
	if rf, ok := ret.Get(0).(func(service.QueuesByRealmAndPlayerKey) []service.QueueOrBattlegroundLink); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.QueueOrBattlegroundLink)
		}
	}

	return r0
}

// InviteGroups provides a mock function with given fields: ctx, groups, bg, team
func (_m *BattleGroundService) InviteGroups(ctx context.Context, groups []service.QueuedGroup, bg *battleground.Battleground, team battleground.PVPTeam) error {
	ret := _m.Called(ctx, groups, bg, team)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []service.QueuedGroup, *battleground.Battleground, battleground.PVPTeam) error); ok {
		r0 = rf(ctx, groups, bg, team)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnGameServerRemoved provides a mock function with given fields: _a0
func (_m *BattleGroundService) OnGameServerRemoved(_a0 *events.ServerRegistryEventGSRemovedPayload) {
	_m.Called(_a0)
}

// PlayerBecomeOffline provides a mock function with given fields: ctx, playerGUID, realmID
func (_m *BattleGroundService) PlayerBecomeOffline(ctx context.Context, playerGUID uint64, realmID uint32) error {
	ret := _m.Called(ctx, playerGUID, realmID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint32) error); ok {
		r0 = rf(ctx, playerGUID, realmID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlayerJoinedBattleground provides a mock function with given fields: ctx, playerGUID, realmID, instanceID, isCrossrealm
func (_m *BattleGroundService) PlayerJoinedBattleground(ctx context.Context, playerGUID uint64, realmID uint32, instanceID uint32, isCrossrealm bool) error {
	ret := _m.Called(ctx, playerGUID, realmID, instanceID, isCrossrealm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint32, uint32, bool) error); ok {
		r0 = rf(ctx, playerGUID, realmID, instanceID, isCrossrealm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlayerLeftBattleground provides a mock function with given fields: ctx, playerGUID, realmID, instanceID, isCrossrealm
func (_m *BattleGroundService) PlayerLeftBattleground(ctx context.Context, playerGUID uint64, realmID uint32, instanceID uint32, isCrossrealm bool) error {
	ret := _m.Called(ctx, playerGUID, realmID, instanceID, isCrossrealm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint32, uint32, bool) error); ok {
		r0 = rf(ctx, playerGUID, realmID, instanceID, isCrossrealm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessExpiredBattlegroundInvites provides a mock function with given fields: ctx
func (_m *BattleGroundService) ProcessExpiredBattlegroundInvites(ctx context.Context) {
	_m.Called(ctx)
}

// RemovePlayerFromQueue provides a mock function with given fields: ctx, playerGUID, realmID, typeID
func (_m *BattleGroundService) RemovePlayerFromQueue(ctx context.Context, playerGUID uint64, realmID uint32, typeID battleground.QueueTypeID) error {
	ret := _m.Called(ctx, playerGUID, realmID, typeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint32, battleground.QueueTypeID) error); ok {
		r0 = rf(ctx, playerGUID, realmID, typeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TemplateForQueueTypeID provides a mock function with given fields: ctx, id
func (_m *BattleGroundService) TemplateForQueueTypeID(ctx context.Context, id battleground.QueueTypeID) repo.BattlegroundTemplate {
	ret := _m.Called(ctx, id)

	var r0 repo.BattlegroundTemplate
	if rf, ok := ret.Get(0).(func(context.Context, battleground.QueueTypeID) repo.BattlegroundTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repo.BattlegroundTemplate)
	}

	return r0
}

type mockConstructorTestingTNewBattleGroundService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBattleGroundService creates a new instance of BattleGroundService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBattleGroundService(t mockConstructorTestingTNewBattleGroundService) *BattleGroundService {
	mock := &BattleGroundService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
