// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	events "github.com/walkline/ToCloud9/shared/events"
)

// MatchmakingServiceProducer is an autogenerated mock type for the MatchmakingServiceProducer type
type MatchmakingServiceProducer struct {
	mock.Mock
}

// InviteExpired provides a mock function with given fields: payload
func (_m *MatchmakingServiceProducer) InviteExpired(payload *events.MatchmakingEventPlayersInviteExpiredPayload) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.MatchmakingEventPlayersInviteExpiredPayload) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvitedToBGOrArena provides a mock function with given fields: payload
func (_m *MatchmakingServiceProducer) InvitedToBGOrArena(payload *events.MatchmakingEventPlayersInvitedPayload) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.MatchmakingEventPlayersInvitedPayload) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JoinedQueue provides a mock function with given fields: payload
func (_m *MatchmakingServiceProducer) JoinedQueue(payload *events.MatchmakingEventPlayersQueuedPayload) error {
	ret := _m.Called(payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(*events.MatchmakingEventPlayersQueuedPayload) error); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMatchmakingServiceProducer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMatchmakingServiceProducer creates a new instance of MatchmakingServiceProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMatchmakingServiceProducer(t mockConstructorTestingTNewMatchmakingServiceProducer) *MatchmakingServiceProducer {
	mock := &MatchmakingServiceProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
