// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: matchmaking.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchmakingService_EnqueueToBattleground_FullMethodName          = "/v1.MatchmakingService/EnqueueToBattleground"
	MatchmakingService_RemovePlayerFromQueue_FullMethodName          = "/v1.MatchmakingService/RemovePlayerFromQueue"
	MatchmakingService_BattlegroundQueueDataForPlayer_FullMethodName = "/v1.MatchmakingService/BattlegroundQueueDataForPlayer"
	MatchmakingService_PlayerLeftBattleground_FullMethodName         = "/v1.MatchmakingService/PlayerLeftBattleground"
	MatchmakingService_PlayerJoinedBattleground_FullMethodName       = "/v1.MatchmakingService/PlayerJoinedBattleground"
	MatchmakingService_BattlegroundStatusChanged_FullMethodName      = "/v1.MatchmakingService/BattlegroundStatusChanged"
)

// MatchmakingServiceClient is the client API for MatchmakingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakingServiceClient interface {
	EnqueueToBattleground(ctx context.Context, in *EnqueueToBattlegroundRequest, opts ...grpc.CallOption) (*EnqueueToBattlegroundResponse, error)
	RemovePlayerFromQueue(ctx context.Context, in *RemovePlayerFromQueueRequest, opts ...grpc.CallOption) (*RemovePlayerFromQueueResponse, error)
	BattlegroundQueueDataForPlayer(ctx context.Context, in *BattlegroundQueueDataForPlayerRequest, opts ...grpc.CallOption) (*BattlegroundQueueDataForPlayerResponse, error)
	PlayerLeftBattleground(ctx context.Context, in *PlayerLeftBattlegroundRequest, opts ...grpc.CallOption) (*PlayerLeftBattlegroundResponse, error)
	PlayerJoinedBattleground(ctx context.Context, in *PlayerJoinedBattlegroundRequest, opts ...grpc.CallOption) (*PlayerJoinedBattlegroundResponse, error)
	BattlegroundStatusChanged(ctx context.Context, in *BattlegroundStatusChangedRequest, opts ...grpc.CallOption) (*BattlegroundStatusChangedResponse, error)
}

type matchmakingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakingServiceClient(cc grpc.ClientConnInterface) MatchmakingServiceClient {
	return &matchmakingServiceClient{cc}
}

func (c *matchmakingServiceClient) EnqueueToBattleground(ctx context.Context, in *EnqueueToBattlegroundRequest, opts ...grpc.CallOption) (*EnqueueToBattlegroundResponse, error) {
	out := new(EnqueueToBattlegroundResponse)
	err := c.cc.Invoke(ctx, MatchmakingService_EnqueueToBattleground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) RemovePlayerFromQueue(ctx context.Context, in *RemovePlayerFromQueueRequest, opts ...grpc.CallOption) (*RemovePlayerFromQueueResponse, error) {
	out := new(RemovePlayerFromQueueResponse)
	err := c.cc.Invoke(ctx, MatchmakingService_RemovePlayerFromQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) BattlegroundQueueDataForPlayer(ctx context.Context, in *BattlegroundQueueDataForPlayerRequest, opts ...grpc.CallOption) (*BattlegroundQueueDataForPlayerResponse, error) {
	out := new(BattlegroundQueueDataForPlayerResponse)
	err := c.cc.Invoke(ctx, MatchmakingService_BattlegroundQueueDataForPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) PlayerLeftBattleground(ctx context.Context, in *PlayerLeftBattlegroundRequest, opts ...grpc.CallOption) (*PlayerLeftBattlegroundResponse, error) {
	out := new(PlayerLeftBattlegroundResponse)
	err := c.cc.Invoke(ctx, MatchmakingService_PlayerLeftBattleground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) PlayerJoinedBattleground(ctx context.Context, in *PlayerJoinedBattlegroundRequest, opts ...grpc.CallOption) (*PlayerJoinedBattlegroundResponse, error) {
	out := new(PlayerJoinedBattlegroundResponse)
	err := c.cc.Invoke(ctx, MatchmakingService_PlayerJoinedBattleground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) BattlegroundStatusChanged(ctx context.Context, in *BattlegroundStatusChangedRequest, opts ...grpc.CallOption) (*BattlegroundStatusChangedResponse, error) {
	out := new(BattlegroundStatusChangedResponse)
	err := c.cc.Invoke(ctx, MatchmakingService_BattlegroundStatusChanged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakingServiceServer is the server API for MatchmakingService service.
// All implementations must embed UnimplementedMatchmakingServiceServer
// for forward compatibility
type MatchmakingServiceServer interface {
	EnqueueToBattleground(context.Context, *EnqueueToBattlegroundRequest) (*EnqueueToBattlegroundResponse, error)
	RemovePlayerFromQueue(context.Context, *RemovePlayerFromQueueRequest) (*RemovePlayerFromQueueResponse, error)
	BattlegroundQueueDataForPlayer(context.Context, *BattlegroundQueueDataForPlayerRequest) (*BattlegroundQueueDataForPlayerResponse, error)
	PlayerLeftBattleground(context.Context, *PlayerLeftBattlegroundRequest) (*PlayerLeftBattlegroundResponse, error)
	PlayerJoinedBattleground(context.Context, *PlayerJoinedBattlegroundRequest) (*PlayerJoinedBattlegroundResponse, error)
	BattlegroundStatusChanged(context.Context, *BattlegroundStatusChangedRequest) (*BattlegroundStatusChangedResponse, error)
	mustEmbedUnimplementedMatchmakingServiceServer()
}

// UnimplementedMatchmakingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchmakingServiceServer struct {
}

func (UnimplementedMatchmakingServiceServer) EnqueueToBattleground(context.Context, *EnqueueToBattlegroundRequest) (*EnqueueToBattlegroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueToBattleground not implemented")
}
func (UnimplementedMatchmakingServiceServer) RemovePlayerFromQueue(context.Context, *RemovePlayerFromQueueRequest) (*RemovePlayerFromQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayerFromQueue not implemented")
}
func (UnimplementedMatchmakingServiceServer) BattlegroundQueueDataForPlayer(context.Context, *BattlegroundQueueDataForPlayerRequest) (*BattlegroundQueueDataForPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlegroundQueueDataForPlayer not implemented")
}
func (UnimplementedMatchmakingServiceServer) PlayerLeftBattleground(context.Context, *PlayerLeftBattlegroundRequest) (*PlayerLeftBattlegroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLeftBattleground not implemented")
}
func (UnimplementedMatchmakingServiceServer) PlayerJoinedBattleground(context.Context, *PlayerJoinedBattlegroundRequest) (*PlayerJoinedBattlegroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerJoinedBattleground not implemented")
}
func (UnimplementedMatchmakingServiceServer) BattlegroundStatusChanged(context.Context, *BattlegroundStatusChangedRequest) (*BattlegroundStatusChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattlegroundStatusChanged not implemented")
}
func (UnimplementedMatchmakingServiceServer) mustEmbedUnimplementedMatchmakingServiceServer() {}

// UnsafeMatchmakingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakingServiceServer will
// result in compilation errors.
type UnsafeMatchmakingServiceServer interface {
	mustEmbedUnimplementedMatchmakingServiceServer()
}

func RegisterMatchmakingServiceServer(s grpc.ServiceRegistrar, srv MatchmakingServiceServer) {
	s.RegisterService(&MatchmakingService_ServiceDesc, srv)
}

func _MatchmakingService_EnqueueToBattleground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueToBattlegroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).EnqueueToBattleground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_EnqueueToBattleground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).EnqueueToBattleground(ctx, req.(*EnqueueToBattlegroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_RemovePlayerFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerFromQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).RemovePlayerFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_RemovePlayerFromQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).RemovePlayerFromQueue(ctx, req.(*RemovePlayerFromQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_BattlegroundQueueDataForPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattlegroundQueueDataForPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).BattlegroundQueueDataForPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_BattlegroundQueueDataForPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).BattlegroundQueueDataForPlayer(ctx, req.(*BattlegroundQueueDataForPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_PlayerLeftBattleground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerLeftBattlegroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).PlayerLeftBattleground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_PlayerLeftBattleground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).PlayerLeftBattleground(ctx, req.(*PlayerLeftBattlegroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_PlayerJoinedBattleground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerJoinedBattlegroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).PlayerJoinedBattleground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_PlayerJoinedBattleground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).PlayerJoinedBattleground(ctx, req.(*PlayerJoinedBattlegroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_BattlegroundStatusChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattlegroundStatusChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).BattlegroundStatusChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakingService_BattlegroundStatusChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).BattlegroundStatusChanged(ctx, req.(*BattlegroundStatusChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchmakingService_ServiceDesc is the grpc.ServiceDesc for MatchmakingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchmakingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MatchmakingService",
	HandlerType: (*MatchmakingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueToBattleground",
			Handler:    _MatchmakingService_EnqueueToBattleground_Handler,
		},
		{
			MethodName: "RemovePlayerFromQueue",
			Handler:    _MatchmakingService_RemovePlayerFromQueue_Handler,
		},
		{
			MethodName: "BattlegroundQueueDataForPlayer",
			Handler:    _MatchmakingService_BattlegroundQueueDataForPlayer_Handler,
		},
		{
			MethodName: "PlayerLeftBattleground",
			Handler:    _MatchmakingService_PlayerLeftBattleground_Handler,
		},
		{
			MethodName: "PlayerJoinedBattleground",
			Handler:    _MatchmakingService_PlayerJoinedBattleground_Handler,
		},
		{
			MethodName: "BattlegroundStatusChanged",
			Handler:    _MatchmakingService_BattlegroundStatusChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaking.proto",
}
