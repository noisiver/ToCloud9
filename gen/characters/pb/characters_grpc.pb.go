// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: characters.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CharactersService_CharactersToLoginForAccount_FullMethodName      = "/v1.CharactersService/CharactersToLoginForAccount"
	CharactersService_CharactersToLoginByGUID_FullMethodName          = "/v1.CharactersService/CharactersToLoginByGUID"
	CharactersService_AccountDataForAccount_FullMethodName            = "/v1.CharactersService/AccountDataForAccount"
	CharactersService_WhoQuery_FullMethodName                         = "/v1.CharactersService/WhoQuery"
	CharactersService_CharacterOnlineByName_FullMethodName            = "/v1.CharactersService/CharacterOnlineByName"
	CharactersService_CharacterByName_FullMethodName                  = "/v1.CharactersService/CharacterByName"
	CharactersService_ShortOnlineCharactersDataByGUIDs_FullMethodName = "/v1.CharactersService/ShortOnlineCharactersDataByGUIDs"
	CharactersService_SavePlayerPosition_FullMethodName               = "/v1.CharactersService/SavePlayerPosition"
)

// CharactersServiceClient is the client API for CharactersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharactersServiceClient interface {
	CharactersToLoginForAccount(ctx context.Context, in *CharactersToLoginForAccountRequest, opts ...grpc.CallOption) (*CharactersToLoginForAccountResponse, error)
	CharactersToLoginByGUID(ctx context.Context, in *CharactersToLoginByGUIDRequest, opts ...grpc.CallOption) (*CharactersToLoginByGUIDResponse, error)
	AccountDataForAccount(ctx context.Context, in *AccountDataForAccountRequest, opts ...grpc.CallOption) (*AccountDataForAccountResponse, error)
	WhoQuery(ctx context.Context, in *WhoQueryRequest, opts ...grpc.CallOption) (*WhoQueryResponse, error)
	CharacterOnlineByName(ctx context.Context, in *CharacterOnlineByNameRequest, opts ...grpc.CallOption) (*CharacterOnlineByNameResponse, error)
	CharacterByName(ctx context.Context, in *CharacterByNameRequest, opts ...grpc.CallOption) (*CharacterByNameResponse, error)
	ShortOnlineCharactersDataByGUIDs(ctx context.Context, in *ShortCharactersDataByGUIDsRequest, opts ...grpc.CallOption) (*ShortCharactersDataByGUIDsResponse, error)
	// Would effect only offline player.
	SavePlayerPosition(ctx context.Context, in *SavePlayerPositionRequest, opts ...grpc.CallOption) (*SavePlayerPositionResponse, error)
}

type charactersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharactersServiceClient(cc grpc.ClientConnInterface) CharactersServiceClient {
	return &charactersServiceClient{cc}
}

func (c *charactersServiceClient) CharactersToLoginForAccount(ctx context.Context, in *CharactersToLoginForAccountRequest, opts ...grpc.CallOption) (*CharactersToLoginForAccountResponse, error) {
	out := new(CharactersToLoginForAccountResponse)
	err := c.cc.Invoke(ctx, CharactersService_CharactersToLoginForAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) CharactersToLoginByGUID(ctx context.Context, in *CharactersToLoginByGUIDRequest, opts ...grpc.CallOption) (*CharactersToLoginByGUIDResponse, error) {
	out := new(CharactersToLoginByGUIDResponse)
	err := c.cc.Invoke(ctx, CharactersService_CharactersToLoginByGUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) AccountDataForAccount(ctx context.Context, in *AccountDataForAccountRequest, opts ...grpc.CallOption) (*AccountDataForAccountResponse, error) {
	out := new(AccountDataForAccountResponse)
	err := c.cc.Invoke(ctx, CharactersService_AccountDataForAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) WhoQuery(ctx context.Context, in *WhoQueryRequest, opts ...grpc.CallOption) (*WhoQueryResponse, error) {
	out := new(WhoQueryResponse)
	err := c.cc.Invoke(ctx, CharactersService_WhoQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) CharacterOnlineByName(ctx context.Context, in *CharacterOnlineByNameRequest, opts ...grpc.CallOption) (*CharacterOnlineByNameResponse, error) {
	out := new(CharacterOnlineByNameResponse)
	err := c.cc.Invoke(ctx, CharactersService_CharacterOnlineByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) CharacterByName(ctx context.Context, in *CharacterByNameRequest, opts ...grpc.CallOption) (*CharacterByNameResponse, error) {
	out := new(CharacterByNameResponse)
	err := c.cc.Invoke(ctx, CharactersService_CharacterByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) ShortOnlineCharactersDataByGUIDs(ctx context.Context, in *ShortCharactersDataByGUIDsRequest, opts ...grpc.CallOption) (*ShortCharactersDataByGUIDsResponse, error) {
	out := new(ShortCharactersDataByGUIDsResponse)
	err := c.cc.Invoke(ctx, CharactersService_ShortOnlineCharactersDataByGUIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) SavePlayerPosition(ctx context.Context, in *SavePlayerPositionRequest, opts ...grpc.CallOption) (*SavePlayerPositionResponse, error) {
	out := new(SavePlayerPositionResponse)
	err := c.cc.Invoke(ctx, CharactersService_SavePlayerPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharactersServiceServer is the server API for CharactersService service.
// All implementations must embed UnimplementedCharactersServiceServer
// for forward compatibility
type CharactersServiceServer interface {
	CharactersToLoginForAccount(context.Context, *CharactersToLoginForAccountRequest) (*CharactersToLoginForAccountResponse, error)
	CharactersToLoginByGUID(context.Context, *CharactersToLoginByGUIDRequest) (*CharactersToLoginByGUIDResponse, error)
	AccountDataForAccount(context.Context, *AccountDataForAccountRequest) (*AccountDataForAccountResponse, error)
	WhoQuery(context.Context, *WhoQueryRequest) (*WhoQueryResponse, error)
	CharacterOnlineByName(context.Context, *CharacterOnlineByNameRequest) (*CharacterOnlineByNameResponse, error)
	CharacterByName(context.Context, *CharacterByNameRequest) (*CharacterByNameResponse, error)
	ShortOnlineCharactersDataByGUIDs(context.Context, *ShortCharactersDataByGUIDsRequest) (*ShortCharactersDataByGUIDsResponse, error)
	// Would effect only offline player.
	SavePlayerPosition(context.Context, *SavePlayerPositionRequest) (*SavePlayerPositionResponse, error)
	mustEmbedUnimplementedCharactersServiceServer()
}

// UnimplementedCharactersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharactersServiceServer struct {
}

func (UnimplementedCharactersServiceServer) CharactersToLoginForAccount(context.Context, *CharactersToLoginForAccountRequest) (*CharactersToLoginForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharactersToLoginForAccount not implemented")
}
func (UnimplementedCharactersServiceServer) CharactersToLoginByGUID(context.Context, *CharactersToLoginByGUIDRequest) (*CharactersToLoginByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharactersToLoginByGUID not implemented")
}
func (UnimplementedCharactersServiceServer) AccountDataForAccount(context.Context, *AccountDataForAccountRequest) (*AccountDataForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDataForAccount not implemented")
}
func (UnimplementedCharactersServiceServer) WhoQuery(context.Context, *WhoQueryRequest) (*WhoQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoQuery not implemented")
}
func (UnimplementedCharactersServiceServer) CharacterOnlineByName(context.Context, *CharacterOnlineByNameRequest) (*CharacterOnlineByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterOnlineByName not implemented")
}
func (UnimplementedCharactersServiceServer) CharacterByName(context.Context, *CharacterByNameRequest) (*CharacterByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterByName not implemented")
}
func (UnimplementedCharactersServiceServer) ShortOnlineCharactersDataByGUIDs(context.Context, *ShortCharactersDataByGUIDsRequest) (*ShortCharactersDataByGUIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortOnlineCharactersDataByGUIDs not implemented")
}
func (UnimplementedCharactersServiceServer) SavePlayerPosition(context.Context, *SavePlayerPositionRequest) (*SavePlayerPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePlayerPosition not implemented")
}
func (UnimplementedCharactersServiceServer) mustEmbedUnimplementedCharactersServiceServer() {}

// UnsafeCharactersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharactersServiceServer will
// result in compilation errors.
type UnsafeCharactersServiceServer interface {
	mustEmbedUnimplementedCharactersServiceServer()
}

func RegisterCharactersServiceServer(s grpc.ServiceRegistrar, srv CharactersServiceServer) {
	s.RegisterService(&CharactersService_ServiceDesc, srv)
}

func _CharactersService_CharactersToLoginForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharactersToLoginForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).CharactersToLoginForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_CharactersToLoginForAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).CharactersToLoginForAccount(ctx, req.(*CharactersToLoginForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_CharactersToLoginByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharactersToLoginByGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).CharactersToLoginByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_CharactersToLoginByGUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).CharactersToLoginByGUID(ctx, req.(*CharactersToLoginByGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_AccountDataForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDataForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).AccountDataForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_AccountDataForAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).AccountDataForAccount(ctx, req.(*AccountDataForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_WhoQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).WhoQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_WhoQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).WhoQuery(ctx, req.(*WhoQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_CharacterOnlineByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterOnlineByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).CharacterOnlineByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_CharacterOnlineByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).CharacterOnlineByName(ctx, req.(*CharacterOnlineByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_CharacterByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).CharacterByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_CharacterByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).CharacterByName(ctx, req.(*CharacterByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_ShortOnlineCharactersDataByGUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortCharactersDataByGUIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).ShortOnlineCharactersDataByGUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_ShortOnlineCharactersDataByGUIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).ShortOnlineCharactersDataByGUIDs(ctx, req.(*ShortCharactersDataByGUIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_SavePlayerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePlayerPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).SavePlayerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharactersService_SavePlayerPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).SavePlayerPosition(ctx, req.(*SavePlayerPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharactersService_ServiceDesc is the grpc.ServiceDesc for CharactersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharactersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CharactersService",
	HandlerType: (*CharactersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CharactersToLoginForAccount",
			Handler:    _CharactersService_CharactersToLoginForAccount_Handler,
		},
		{
			MethodName: "CharactersToLoginByGUID",
			Handler:    _CharactersService_CharactersToLoginByGUID_Handler,
		},
		{
			MethodName: "AccountDataForAccount",
			Handler:    _CharactersService_AccountDataForAccount_Handler,
		},
		{
			MethodName: "WhoQuery",
			Handler:    _CharactersService_WhoQuery_Handler,
		},
		{
			MethodName: "CharacterOnlineByName",
			Handler:    _CharactersService_CharacterOnlineByName_Handler,
		},
		{
			MethodName: "CharacterByName",
			Handler:    _CharactersService_CharacterByName_Handler,
		},
		{
			MethodName: "ShortOnlineCharactersDataByGUIDs",
			Handler:    _CharactersService_ShortOnlineCharactersDataByGUIDs_Handler,
		},
		{
			MethodName: "SavePlayerPosition",
			Handler:    _CharactersService_SavePlayerPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "characters.proto",
}
