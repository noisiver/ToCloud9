// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: worldserver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorldServerService_GetPlayerItemsByGuids_FullMethodName           = "/v1.WorldServerService/GetPlayerItemsByGuids"
	WorldServerService_RemoveItemsWithGuidsFromPlayer_FullMethodName  = "/v1.WorldServerService/RemoveItemsWithGuidsFromPlayer"
	WorldServerService_AddExistingItemToPlayer_FullMethodName         = "/v1.WorldServerService/AddExistingItemToPlayer"
	WorldServerService_GetMoneyForPlayer_FullMethodName               = "/v1.WorldServerService/GetMoneyForPlayer"
	WorldServerService_ModifyMoneyForPlayer_FullMethodName            = "/v1.WorldServerService/ModifyMoneyForPlayer"
	WorldServerService_CanPlayerInteractWithNPC_FullMethodName        = "/v1.WorldServerService/CanPlayerInteractWithNPC"
	WorldServerService_CanPlayerInteractWithGameObject_FullMethodName = "/v1.WorldServerService/CanPlayerInteractWithGameObject"
	WorldServerService_StartBattleground_FullMethodName               = "/v1.WorldServerService/StartBattleground"
	WorldServerService_AddPlayersToBattleground_FullMethodName        = "/v1.WorldServerService/AddPlayersToBattleground"
	WorldServerService_CanPlayerJoinBattlegroundQueue_FullMethodName  = "/v1.WorldServerService/CanPlayerJoinBattlegroundQueue"
	WorldServerService_CanPlayerTeleportToBattleground_FullMethodName = "/v1.WorldServerService/CanPlayerTeleportToBattleground"
)

// WorldServerServiceClient is the client API for WorldServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldServerServiceClient interface {
	// Items
	GetPlayerItemsByGuids(ctx context.Context, in *GetPlayerItemsByGuidsRequest, opts ...grpc.CallOption) (*GetPlayerItemsByGuidsResponse, error)
	RemoveItemsWithGuidsFromPlayer(ctx context.Context, in *RemoveItemsWithGuidsFromPlayerRequest, opts ...grpc.CallOption) (*RemoveItemsWithGuidsFromPlayerResponse, error)
	AddExistingItemToPlayer(ctx context.Context, in *AddExistingItemToPlayerRequest, opts ...grpc.CallOption) (*AddExistingItemToPlayerResponse, error)
	// Money
	GetMoneyForPlayer(ctx context.Context, in *GetMoneyForPlayerRequest, opts ...grpc.CallOption) (*GetMoneyForPlayerResponse, error)
	ModifyMoneyForPlayer(ctx context.Context, in *ModifyMoneyForPlayerRequest, opts ...grpc.CallOption) (*ModifyMoneyForPlayerResponse, error)
	// Interactions
	CanPlayerInteractWithNPC(ctx context.Context, in *CanPlayerInteractWithNPCRequest, opts ...grpc.CallOption) (*CanPlayerInteractWithNPCResponse, error)
	CanPlayerInteractWithGameObject(ctx context.Context, in *CanPlayerInteractWithGameObjectRequest, opts ...grpc.CallOption) (*CanPlayerInteractWithGameObjectResponse, error)
	// Battlegrounds
	StartBattleground(ctx context.Context, in *StartBattlegroundRequest, opts ...grpc.CallOption) (*StartBattlegroundResponse, error)
	AddPlayersToBattleground(ctx context.Context, in *AddPlayersToBattlegroundRequest, opts ...grpc.CallOption) (*AddPlayersToBattlegroundResponse, error)
	CanPlayerJoinBattlegroundQueue(ctx context.Context, in *CanPlayerJoinBattlegroundQueueRequest, opts ...grpc.CallOption) (*CanPlayerJoinBattlegroundQueueResponse, error)
	CanPlayerTeleportToBattleground(ctx context.Context, in *CanPlayerTeleportToBattlegroundRequest, opts ...grpc.CallOption) (*CanPlayerTeleportToBattlegroundResponse, error)
}

type worldServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldServerServiceClient(cc grpc.ClientConnInterface) WorldServerServiceClient {
	return &worldServerServiceClient{cc}
}

func (c *worldServerServiceClient) GetPlayerItemsByGuids(ctx context.Context, in *GetPlayerItemsByGuidsRequest, opts ...grpc.CallOption) (*GetPlayerItemsByGuidsResponse, error) {
	out := new(GetPlayerItemsByGuidsResponse)
	err := c.cc.Invoke(ctx, WorldServerService_GetPlayerItemsByGuids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) RemoveItemsWithGuidsFromPlayer(ctx context.Context, in *RemoveItemsWithGuidsFromPlayerRequest, opts ...grpc.CallOption) (*RemoveItemsWithGuidsFromPlayerResponse, error) {
	out := new(RemoveItemsWithGuidsFromPlayerResponse)
	err := c.cc.Invoke(ctx, WorldServerService_RemoveItemsWithGuidsFromPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) AddExistingItemToPlayer(ctx context.Context, in *AddExistingItemToPlayerRequest, opts ...grpc.CallOption) (*AddExistingItemToPlayerResponse, error) {
	out := new(AddExistingItemToPlayerResponse)
	err := c.cc.Invoke(ctx, WorldServerService_AddExistingItemToPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) GetMoneyForPlayer(ctx context.Context, in *GetMoneyForPlayerRequest, opts ...grpc.CallOption) (*GetMoneyForPlayerResponse, error) {
	out := new(GetMoneyForPlayerResponse)
	err := c.cc.Invoke(ctx, WorldServerService_GetMoneyForPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) ModifyMoneyForPlayer(ctx context.Context, in *ModifyMoneyForPlayerRequest, opts ...grpc.CallOption) (*ModifyMoneyForPlayerResponse, error) {
	out := new(ModifyMoneyForPlayerResponse)
	err := c.cc.Invoke(ctx, WorldServerService_ModifyMoneyForPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) CanPlayerInteractWithNPC(ctx context.Context, in *CanPlayerInteractWithNPCRequest, opts ...grpc.CallOption) (*CanPlayerInteractWithNPCResponse, error) {
	out := new(CanPlayerInteractWithNPCResponse)
	err := c.cc.Invoke(ctx, WorldServerService_CanPlayerInteractWithNPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) CanPlayerInteractWithGameObject(ctx context.Context, in *CanPlayerInteractWithGameObjectRequest, opts ...grpc.CallOption) (*CanPlayerInteractWithGameObjectResponse, error) {
	out := new(CanPlayerInteractWithGameObjectResponse)
	err := c.cc.Invoke(ctx, WorldServerService_CanPlayerInteractWithGameObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) StartBattleground(ctx context.Context, in *StartBattlegroundRequest, opts ...grpc.CallOption) (*StartBattlegroundResponse, error) {
	out := new(StartBattlegroundResponse)
	err := c.cc.Invoke(ctx, WorldServerService_StartBattleground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) AddPlayersToBattleground(ctx context.Context, in *AddPlayersToBattlegroundRequest, opts ...grpc.CallOption) (*AddPlayersToBattlegroundResponse, error) {
	out := new(AddPlayersToBattlegroundResponse)
	err := c.cc.Invoke(ctx, WorldServerService_AddPlayersToBattleground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) CanPlayerJoinBattlegroundQueue(ctx context.Context, in *CanPlayerJoinBattlegroundQueueRequest, opts ...grpc.CallOption) (*CanPlayerJoinBattlegroundQueueResponse, error) {
	out := new(CanPlayerJoinBattlegroundQueueResponse)
	err := c.cc.Invoke(ctx, WorldServerService_CanPlayerJoinBattlegroundQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServerServiceClient) CanPlayerTeleportToBattleground(ctx context.Context, in *CanPlayerTeleportToBattlegroundRequest, opts ...grpc.CallOption) (*CanPlayerTeleportToBattlegroundResponse, error) {
	out := new(CanPlayerTeleportToBattlegroundResponse)
	err := c.cc.Invoke(ctx, WorldServerService_CanPlayerTeleportToBattleground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldServerServiceServer is the server API for WorldServerService service.
// All implementations must embed UnimplementedWorldServerServiceServer
// for forward compatibility
type WorldServerServiceServer interface {
	// Items
	GetPlayerItemsByGuids(context.Context, *GetPlayerItemsByGuidsRequest) (*GetPlayerItemsByGuidsResponse, error)
	RemoveItemsWithGuidsFromPlayer(context.Context, *RemoveItemsWithGuidsFromPlayerRequest) (*RemoveItemsWithGuidsFromPlayerResponse, error)
	AddExistingItemToPlayer(context.Context, *AddExistingItemToPlayerRequest) (*AddExistingItemToPlayerResponse, error)
	// Money
	GetMoneyForPlayer(context.Context, *GetMoneyForPlayerRequest) (*GetMoneyForPlayerResponse, error)
	ModifyMoneyForPlayer(context.Context, *ModifyMoneyForPlayerRequest) (*ModifyMoneyForPlayerResponse, error)
	// Interactions
	CanPlayerInteractWithNPC(context.Context, *CanPlayerInteractWithNPCRequest) (*CanPlayerInteractWithNPCResponse, error)
	CanPlayerInteractWithGameObject(context.Context, *CanPlayerInteractWithGameObjectRequest) (*CanPlayerInteractWithGameObjectResponse, error)
	// Battlegrounds
	StartBattleground(context.Context, *StartBattlegroundRequest) (*StartBattlegroundResponse, error)
	AddPlayersToBattleground(context.Context, *AddPlayersToBattlegroundRequest) (*AddPlayersToBattlegroundResponse, error)
	CanPlayerJoinBattlegroundQueue(context.Context, *CanPlayerJoinBattlegroundQueueRequest) (*CanPlayerJoinBattlegroundQueueResponse, error)
	CanPlayerTeleportToBattleground(context.Context, *CanPlayerTeleportToBattlegroundRequest) (*CanPlayerTeleportToBattlegroundResponse, error)
	mustEmbedUnimplementedWorldServerServiceServer()
}

// UnimplementedWorldServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorldServerServiceServer struct {
}

func (UnimplementedWorldServerServiceServer) GetPlayerItemsByGuids(context.Context, *GetPlayerItemsByGuidsRequest) (*GetPlayerItemsByGuidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItemsByGuids not implemented")
}
func (UnimplementedWorldServerServiceServer) RemoveItemsWithGuidsFromPlayer(context.Context, *RemoveItemsWithGuidsFromPlayerRequest) (*RemoveItemsWithGuidsFromPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItemsWithGuidsFromPlayer not implemented")
}
func (UnimplementedWorldServerServiceServer) AddExistingItemToPlayer(context.Context, *AddExistingItemToPlayerRequest) (*AddExistingItemToPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExistingItemToPlayer not implemented")
}
func (UnimplementedWorldServerServiceServer) GetMoneyForPlayer(context.Context, *GetMoneyForPlayerRequest) (*GetMoneyForPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoneyForPlayer not implemented")
}
func (UnimplementedWorldServerServiceServer) ModifyMoneyForPlayer(context.Context, *ModifyMoneyForPlayerRequest) (*ModifyMoneyForPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMoneyForPlayer not implemented")
}
func (UnimplementedWorldServerServiceServer) CanPlayerInteractWithNPC(context.Context, *CanPlayerInteractWithNPCRequest) (*CanPlayerInteractWithNPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanPlayerInteractWithNPC not implemented")
}
func (UnimplementedWorldServerServiceServer) CanPlayerInteractWithGameObject(context.Context, *CanPlayerInteractWithGameObjectRequest) (*CanPlayerInteractWithGameObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanPlayerInteractWithGameObject not implemented")
}
func (UnimplementedWorldServerServiceServer) StartBattleground(context.Context, *StartBattlegroundRequest) (*StartBattlegroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBattleground not implemented")
}
func (UnimplementedWorldServerServiceServer) AddPlayersToBattleground(context.Context, *AddPlayersToBattlegroundRequest) (*AddPlayersToBattlegroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayersToBattleground not implemented")
}
func (UnimplementedWorldServerServiceServer) CanPlayerJoinBattlegroundQueue(context.Context, *CanPlayerJoinBattlegroundQueueRequest) (*CanPlayerJoinBattlegroundQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanPlayerJoinBattlegroundQueue not implemented")
}
func (UnimplementedWorldServerServiceServer) CanPlayerTeleportToBattleground(context.Context, *CanPlayerTeleportToBattlegroundRequest) (*CanPlayerTeleportToBattlegroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanPlayerTeleportToBattleground not implemented")
}
func (UnimplementedWorldServerServiceServer) mustEmbedUnimplementedWorldServerServiceServer() {}

// UnsafeWorldServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldServerServiceServer will
// result in compilation errors.
type UnsafeWorldServerServiceServer interface {
	mustEmbedUnimplementedWorldServerServiceServer()
}

func RegisterWorldServerServiceServer(s grpc.ServiceRegistrar, srv WorldServerServiceServer) {
	s.RegisterService(&WorldServerService_ServiceDesc, srv)
}

func _WorldServerService_GetPlayerItemsByGuids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemsByGuidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).GetPlayerItemsByGuids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_GetPlayerItemsByGuids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).GetPlayerItemsByGuids(ctx, req.(*GetPlayerItemsByGuidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_RemoveItemsWithGuidsFromPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemsWithGuidsFromPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).RemoveItemsWithGuidsFromPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_RemoveItemsWithGuidsFromPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).RemoveItemsWithGuidsFromPlayer(ctx, req.(*RemoveItemsWithGuidsFromPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_AddExistingItemToPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExistingItemToPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).AddExistingItemToPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_AddExistingItemToPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).AddExistingItemToPlayer(ctx, req.(*AddExistingItemToPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_GetMoneyForPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoneyForPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).GetMoneyForPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_GetMoneyForPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).GetMoneyForPlayer(ctx, req.(*GetMoneyForPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_ModifyMoneyForPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMoneyForPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).ModifyMoneyForPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_ModifyMoneyForPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).ModifyMoneyForPlayer(ctx, req.(*ModifyMoneyForPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_CanPlayerInteractWithNPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanPlayerInteractWithNPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).CanPlayerInteractWithNPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_CanPlayerInteractWithNPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).CanPlayerInteractWithNPC(ctx, req.(*CanPlayerInteractWithNPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_CanPlayerInteractWithGameObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanPlayerInteractWithGameObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).CanPlayerInteractWithGameObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_CanPlayerInteractWithGameObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).CanPlayerInteractWithGameObject(ctx, req.(*CanPlayerInteractWithGameObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_StartBattleground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBattlegroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).StartBattleground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_StartBattleground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).StartBattleground(ctx, req.(*StartBattlegroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_AddPlayersToBattleground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayersToBattlegroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).AddPlayersToBattleground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_AddPlayersToBattleground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).AddPlayersToBattleground(ctx, req.(*AddPlayersToBattlegroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_CanPlayerJoinBattlegroundQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanPlayerJoinBattlegroundQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).CanPlayerJoinBattlegroundQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_CanPlayerJoinBattlegroundQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).CanPlayerJoinBattlegroundQueue(ctx, req.(*CanPlayerJoinBattlegroundQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldServerService_CanPlayerTeleportToBattleground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanPlayerTeleportToBattlegroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServerServiceServer).CanPlayerTeleportToBattleground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldServerService_CanPlayerTeleportToBattleground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServerServiceServer).CanPlayerTeleportToBattleground(ctx, req.(*CanPlayerTeleportToBattlegroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldServerService_ServiceDesc is the grpc.ServiceDesc for WorldServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WorldServerService",
	HandlerType: (*WorldServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerItemsByGuids",
			Handler:    _WorldServerService_GetPlayerItemsByGuids_Handler,
		},
		{
			MethodName: "RemoveItemsWithGuidsFromPlayer",
			Handler:    _WorldServerService_RemoveItemsWithGuidsFromPlayer_Handler,
		},
		{
			MethodName: "AddExistingItemToPlayer",
			Handler:    _WorldServerService_AddExistingItemToPlayer_Handler,
		},
		{
			MethodName: "GetMoneyForPlayer",
			Handler:    _WorldServerService_GetMoneyForPlayer_Handler,
		},
		{
			MethodName: "ModifyMoneyForPlayer",
			Handler:    _WorldServerService_ModifyMoneyForPlayer_Handler,
		},
		{
			MethodName: "CanPlayerInteractWithNPC",
			Handler:    _WorldServerService_CanPlayerInteractWithNPC_Handler,
		},
		{
			MethodName: "CanPlayerInteractWithGameObject",
			Handler:    _WorldServerService_CanPlayerInteractWithGameObject_Handler,
		},
		{
			MethodName: "StartBattleground",
			Handler:    _WorldServerService_StartBattleground_Handler,
		},
		{
			MethodName: "AddPlayersToBattleground",
			Handler:    _WorldServerService_AddPlayersToBattleground_Handler,
		},
		{
			MethodName: "CanPlayerJoinBattlegroundQueue",
			Handler:    _WorldServerService_CanPlayerJoinBattlegroundQueue_Handler,
		},
		{
			MethodName: "CanPlayerTeleportToBattleground",
			Handler:    _WorldServerService_CanPlayerTeleportToBattleground_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worldserver.proto",
}
